name: Pull Updater Artifacts

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository to pull artifacts from (format: owner/repo)'
        required: true
        default: '0PandaDEV/Qopy'
      run_id:
        description: 'Action run ID to pull artifacts from'
        required: true
      version:
        description: 'Version number (optional, will be determined from files if not provided)'
        required: false

jobs:
  pull-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const [owner, repo] = '${{ github.event.inputs.repo }}'.split('/');
            
            console.log(`Fetching artifacts from ${owner}/${repo} run #${{ github.event.inputs.run_id }}`);
            
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: owner,
              repo: repo,
              run_id: ${{ github.event.inputs.run_id }}
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} total artifacts`);
            
            const updaterArtifacts = artifacts.data.artifacts.filter(
              artifact => artifact.name.toLowerCase().includes('updater')
            );
            
            console.log(`Found ${updaterArtifacts.length} updater artifacts:`);
            updaterArtifacts.forEach(a => console.log(`- ${a.name} (${a.size_in_bytes} bytes)`));
            
            let detectedVersion = null;
            let versionDir = null;
            
            // First pass - detect version
            for (const artifact of updaterArtifacts) {
              if (detectedVersion) break;
              
              console.log(`\nChecking artifact for version: ${artifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: owner,
                repo: repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              // Create temporary directory for version detection
              const tempDir = 'temp_extract';
              if (!fs.existsSync(tempDir)) {
                fs.mkdirSync(tempDir);
                console.log('Created temp directory for extraction');
              }
              
              // Save and extract first zip to detect version
              const tempPath = path.join(tempDir, 'temp.zip');
              fs.writeFileSync(tempPath, Buffer.from(download.data));
              console.log('Saved temporary zip file');
              
              // Extract and look for version info
              require('child_process').execSync(`unzip -o "${tempPath}" -d ${tempDir}`);
              console.log('Extracted zip contents');
              
              // Look for files matching the pattern Qopy-v*.* in the extracted contents
              const getAllFiles = (dir) => {
                const files = fs.readdirSync(dir, { withFileTypes: true });
                let fileList = [];
                
                for (const file of files) {
                  const fullPath = path.join(dir, file.name);
                  if (file.isDirectory()) {
                    fileList = fileList.concat(getAllFiles(fullPath));
                  } else {
                    fileList.push(fullPath);
                  }
                }
                
                return fileList;
              };
              
              const files = getAllFiles(tempDir);
              console.log('\nSearching for version in files:');
              files.forEach(f => console.log(`- ${f}`));
              
              for (const file of files) {
                console.log(`\nChecking file: ${file}`);
                console.log(`Running regex test on filename`);
                
                // Log the regex pattern we're using
                console.log(`Using regex pattern: /Qopy-v([0-9]+\.[0-9]+\.[0-9]+)/i`);
                
                const versionMatch = file.match(/Qopy-v([0-9]+\.[0-9]+\.[0-9]+)/i);
                console.log(`Match result:`, versionMatch);
                
                if (versionMatch) {
                  detectedVersion = 'v' + versionMatch[1];
                  console.log(`SUCCESS: Detected version: ${detectedVersion} from file: ${file}`);
                  break;
                } else {
                  // Try alternative pattern without 'v'
                  console.log(`Trying alternative pattern: /Qopy-([0-9]+\.[0-9]+\.[0-9]+)/i`);
                  const altMatch = file.match(/Qopy-([0-9]+\.[0-9]+\.[0-9]+)/i);
                  console.log(`Alternative match result:`, altMatch);
                  
                  if (altMatch) {
                    detectedVersion = 'v' + altMatch[1];
                    console.log(`SUCCESS: Detected version: ${detectedVersion} from file: ${file}`);
                    break;
                  }
                }
                console.log(`No version match found in this file`);
              }
              
              console.log(`\nFinal detected version: ${detectedVersion}`);
              
              // Cleanup temp
              fs.rmSync(tempDir, { recursive: true, force: true });
              console.log('Cleaned up temp directory');
            }
            
            // Use provided version or detected version
            versionDir = '${{ github.event.inputs.version }}' || detectedVersion;
            console.log(`\nUsing version directory: ${versionDir}`);
            
            if (!versionDir) {
              console.log('ERROR: No version could be detected or provided');
              core.setFailed('Could not detect version and no version was provided');
              return;
            }
            
            // Check if version already exists
            if (fs.existsSync(versionDir)) {
              console.log(`ERROR: Version ${versionDir} already exists`);
              core.setFailed(`Version ${versionDir} already exists. Skipping to prevent overwrite.`);
              return;
            }
            
            // Create version directory once
            fs.mkdirSync(versionDir);
            console.log(`Created version directory: ${versionDir}`);
            
            // Second pass - save all artifacts
            for (const artifact of updaterArtifacts) {
              console.log(`\nProcessing artifact: ${artifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: owner,
                repo: repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              // Save the zip file
              const artifactPath = path.join(versionDir, `${artifact.name}.zip`);
              fs.writeFileSync(artifactPath, Buffer.from(download.data));
              console.log(`Saved artifact to: ${artifactPath}`);
            }

      - name: Extract artifacts
        if: success()
        run: |
          VERSION_DIR="${{ github.event.inputs.version }}"
          if [ -z "$VERSION_DIR" ]; then
            VERSION_DIR=$(ls -d v* | head -n 1)
          fi
          cd "$VERSION_DIR"
          for zip in updater-*.zip; do
            echo "Extracting $zip"
            unzip -o "$zip" -d "${zip%.zip}"
            rm "$zip"
          done

      - name: Commit and push changes
        if: success()
        run: |
          VERSION_DIR="${{ github.event.inputs.version }}"
          if [ -z "$VERSION_DIR" ]; then
            VERSION_DIR=$(ls -d v* | head -n 1)
          fi
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "$VERSION_DIR"
          git commit -m "Add updater files for $VERSION_DIR"
          git push